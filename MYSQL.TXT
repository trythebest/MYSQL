-- //To create DB 
CREATE DATABASE ecommerce;

-- //To create tables for the DB
CREATE TABLE customers(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(100) NOT NULL,
email VARCHAR(100) NOT NULL,
address TEXT NOT NULL
);

CREATE TABLE orders(
id INT PRIMARY KEY AUTO_INCREMENT,
customer_id INT NOT NULL,
order_date DATE NOT NULL,
total_amount DECIMAL(8,2) NOT NULL,
FOREIGN KEY(customer_id) REFERENCES customers(id)
);

CREATE TABLE products(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(100) NOT NULL,
price DECIMAL(8,2) NOT NULL,
description TEXT NOT NULL
);

-- //to print the created table 
SELECT * FROM customers,orders,products;

-- //Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.
CREATE TABLE order_items (
id INT AUTO_INCREMENT PRIMARY KEY,
order_id INT NOT NULL,
product_id INT NOT NULL,
quantity INT NOT NULL,
FOREIGN KEY(order_id) REFERENCES orders(id),
FOREIGN KEY(product_id) REFERENCES products(id)
);
DESCRIBE order_items;

-- //Inserting row values in the table
INSERT INTO customers
VALUES 
( 1, "mani", "mani@gmail.com", "chennai"),
( 2, "harini", "harini@gmail.com", "trichy"),
( 3, "charan", "charan@gmail.com", "vellore"),
( 4, "arul", "arul@gmail.com", "Dindigul");

INSERT INTO orders
VALUES 
( 1, 1, 20081111, 499.99),
( 2, 2, 20081109, 49.99),
( 3, 3, 20081111, 99.99),
( 4, 4, 20081029, 199.99);

INSERT INTO products
VALUES 
( 1, "Product A", 49.99, "Description for Product A"),
( 2, "Product B", 99.99, "Description for Product B"),
( 3, "Product C", 499.99, "Description for Product C");

INSERT INTO order_items
VALUES
(1,1,1,2),
(2,2,2,1),
(3,3,1,1);
SELECT * FROM customers,orders,products,order_items;

-- //Retrieve all customers who have placed an order in the last 30 days.
SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;

-- //Get the total amount of all orders placed by each customer.
SELECT customers.name , SUM(orders.total_amount) AS total_spent
FROM customers
JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.name;

-- //Update the price of Product C to 45.00.
UPDATE products
SET price = 45.00
WHERE id = 3;
SELECT * FROM products;

-- //Add a new column discount to the products table.
ALTER TABLE products ADD COLUMN discount DECIMAl(5,2) DEFAULT 0.00;
SELECT * FROM products;

-- //Retrieve the top 3 products with the highest price.
SELECT name,price FROM products ORDER BY price DESC LIMIT 3;

-- //Get the names of customers who have ordered Product A.
SELECT DISTINCT customers.name 
FROM customers
JOIN orders ON customers.id = orders.customer_id
JOIN order_items ON orders.id = order_items.order_id
JOIN products ON order_items.product_id = products.id
WHERE products.name = "Product A";

-- //Join the orders and customers tables to retrieve the customer's name and order date for each order. 
SELECT customers.name, orders.order_date 
FROM customers 
JOIN orders ON customers.id = orders.customer_id;

-- //Retrieve the orders with a total amount greater than 150.00.
SELECT * FROM orders WHERE total_amount > 150;

-- //Retrieve the average total of all orders.
SELECT AVG(total_amount) FROM orders;




